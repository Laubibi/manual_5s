import os
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objs as go
from PIL import Image
import numpy as np
from datetime import datetime
import random
# configuracion de la pagina como primera llamada de Streamlit
st.set_page_config(
        page_title="Manual 5S ARA", 
        page_icon="üöö", 
        layout="wide")

# Configuraci√≥n de colores
COLORES_ARA = {
    'naranja_principal': '#FF6600',  # Color naranja principal
    'naranja_claro': '#FF8533',     # Naranja degradado
    'blanco': '#FFFFFF',            # Blanco para fondo de otras secciones
    'azul_oscuro': '#003366',       # Azul oscuro para textos
}

def aplicar_estilos_portada():
    """Estilos exclusivos para la portada."""
    st.markdown(f"""
    <style>
    .stApp {{
        background: linear-gradient(180deg, {COLORES_ARA['naranja_principal']} 0%, {COLORES_ARA['naranja_claro']} 100%);
    }}
    /* Ajuste de la barra lateral */
    [data-testid="stSidebar"] {{
        background-color: #FF4500 !important; /* Fondo naranja oscuro */
        color: white !important; /* Texto blanco */
    }}
    [data-testid="stSidebar"] .css-1v3fvcr {{
        color: white !important; /* Texto del radio blanco */
    }}
    [data-testid="stSidebar"] .css-1v3fvcr:hover {{
        color: #FFD700 !important; /* Texto amarillo al pasar el rat√≥n */
    }}
    h1, h2, h3 {{
        color: {COLORES_ARA['blanco']};
    }}
    p {{
        color: {COLORES_ARA['blanco']};
        font-size: 1.2rem;
    }}
    </style>
    """, unsafe_allow_html=True)


def aplicar_estilos_generales():
    """Estilos generales para las secciones distintas a la portada."""
    st.markdown(f"""
    <style>
    .stApp {{
        background-color: {COLORES_ARA['blanco']};
    }}
    /* Ajuste de la barra lateral */
    [data-testid="stSidebar"] {{
        background-color: {COLORES_ARA['blanco']} !important; /* Fondo blanco */
        color: {COLORES_ARA['azul_oscuro']} !important; /* Texto azul oscuro */
    }}
    [data-testid="stSidebar"] .css-1v3fvcr {{
        color: {COLORES_ARA['azul_oscuro']} !important; /* Texto del radio azul oscuro */
    }}
    [data-testid="stSidebar"] .css-1v3fvcr:hover {{
        color: {COLORES_ARA['naranja_principal']} !important; /* Texto naranja al pasar el rat√≥n */
    }}
    h1, h2, h3 {{
        color: {COLORES_ARA['naranja_principal']};
        font-weight: bold;
    }}
    p {{
        color: {COLORES_ARA['azul_oscuro']};
        font-size: 1rem;
    }}
    </style>
    """, unsafe_allow_html=True)

def pagina_inicio():
    mostrar_logo()
    aplicar_estilos_portada()
    st.markdown("""
        <div style='text-align: center; padding: 2rem;'>
            <h1 style='font-size: 3.5rem; margin-bottom: 1rem;'>Manual de Implementaci√≥n</h1>
            <h2 style='font-size: 4.5rem; margin-bottom: 2rem;'>5S - COLED</h2>
            <p>Sistema Integral de Mejora Continua</p>
        </div>
    """, unsafe_allow_html=True)

    # Grid de las 5S
    col1, col2, col3, col4, col5 = st.columns(5)
    for col, letra, texto in zip(
        [col1, col2, col3, col4, col5],
        ["C", "O", "L", "E", "D"],
        ["Clasificar", "Ordenar", "Limpiar", "Estandarizar", "Disciplinar"]
    ):
        with col:
            st.markdown(f"""
                <div style='background: rgba(255, 255, 255, 0.9); padding: 1rem; border-radius: 10px; text-align: center;'>
                    <h3 style='color: {COLORES_ARA['naranja_principal']}; font-size: 2rem;'>{letra}</h3>
                    <p style='color: {COLORES_ARA['azul_oscuro']};'>{texto}</p>
                </div>
            """, unsafe_allow_html=True)

    st.markdown("""
        <div style='text-align: center; padding: 2rem;'>
            <p>
                Una gu√≠a para la implementaci√≥n de la metodolog√≠a 5S en centros de distribuci√≥n ARA.
            </p>
            <p>Desarrollado por el equipo de proyectos de log√≠stica</p>
            <p style='margin-top: 2rem;'>
                JER√ìNIMO MARTINS COLOMBIA - ARA - Alegria al mejor precio<br>
                ¬© 2024 Todos los derechos reservados
            </p>
        </div>
    """, unsafe_allow_html=True)

def contexto_5s():
    mostrar_logo()
    st.title("üîç Contexto de las 5S")
    
    st.markdown("""
    ## ¬øQu√© son las 5S?
    
    Las 5S son una metodolog√≠a japonesa dise√±ada para transformar el entorno laboral, mejorando la organizaci√≥n, la limpieza y la disciplina. 
    Este sistema es fundamental para promover una cultura de **seguridad**, **mejora continua** y **eficiencia** en cualquier organizaci√≥n.

    ### Origen de las 5S
    - **Desarrollado en Jap√≥n:** Parte esencial del Sistema de Producci√≥n Toyota.
    - **Nombre:** Deriva de cinco palabras japonesas que describen pasos clave para la mejora del espacio de trabajo:
      1. **Seiri:** Clasificar.
      2. **Seiton:** Ordenar.
      3. **Seiso:** Limpiar.
      4. **Seiketsu:** Estandarizar.
      5. **Shitsuke:** Disciplinar.

    ### ¬øPor qu√© implementar las 5S?
     La metodolog√≠a 5S no solo organiza el espacio f√≠sico, sino que tambi√©n:
    - Fomenta una **cultura de seguridad laboral**, minimizando riesgos y accidentes.
    - Crea un entorno que **apoya la mejora continua** en procesos y operaciones.
    - Refuerza los valores de **disciplina** y **trabajo en equipo**, fortaleciendo la cultura organizacional.

     ### Beneficios clave
    - **Seguridad:** Un espacio de trabajo organizado y limpio reduce riesgos, protege a los empleados y crea confianza.
    - **Eficiencia:** Menos tiempo perdido buscando herramientas o productos.
    - **Cultura:** Impulsa h√°bitos positivos y fomenta la participaci√≥n activa del personal en el mejoramiento de su entorno laboral.
    - **Productividad:** Los procesos se vuelven m√°s √°giles y menos propensos a errores.
    
    """)
    st.image("images/las 5s.png", caption="Contexto de las 5S en la Log√≠stica", use_container_width=True)
    
def introduccion_coled():
    """Secci√≥n: Introducci√≥n a la metodolog√≠a COLED."""
    aplicar_estilos_generales()
    st.title("üöÄ Metodolog√≠a C.O.L.E.D")
    st.markdown("""
    ## ¬øQu√© es C.O.L.E.D?
    Un acr√≥nimo f√°cil de recordar que representa las 5 etapas de mejora continua:
    - **C**lasificar: Separar lo necesario de lo innecesario
    - **O**rdenar: Organizar de manera eficiente
    - **L**impiar: Mantener un espacio impecable
    - **E**standardizar: Crear procedimientos consistentes
    - **D**isciplinar: Mantener y mejorar continuamente
    """)
    st.image("images/las 5s.png", caption="Metodolog√≠a C.O.L.E.D",use_container_width=True )

def mostrar_logo():
    """Muestra el logo de la empresa en la parte superior de cada secci√≥n."""
    try:
        st.image("images/ARA.png", width=300, use_container_width=False)
    except FileNotFoundError:
        st.warning("No se encontr√≥ el logo en la carpeta 'images'. Verifica que el archivo est√© en la ruta correcta.")

def main():
    st.sidebar.title("Manual 5S ARA")
    
    # Men√∫ de navegaci√≥n
    seccion = st.sidebar.radio(
        "Seleccione una secci√≥n:",
        ["Inicio","Contexto de las 5S"," Metodolog√≠a C.O.L.E.D", "Clasificar (Seiri)", "Ordenar (Seiton)", "Limpiar (Seiso)", 
         "Estandarizar (Seiketsu)", "Disciplinar (Shitsuke)", "Auditor√≠a 5S", "M√©tricas y Seguimiento 5s"]
    )
    
    # Mostrar el logo en todas las secciones
    mostrar_logo()
    
    # Aplicar estilos y l√≥gica por secci√≥n
    if seccion == "Inicio":
        aplicar_estilos_portada()
        pagina_inicio()
    else:
        aplicar_estilos_generales()
        
        if seccion == "Contexto de las 5S":
            contexto_5s()
        elif seccion == "Metodolog√≠a C.O.L.E.D":  # Llama a la funci√≥n de COLED
            introduccion_coled()
        elif seccion == "Clasificar (Seiri)":
            seccion_seiri()
        elif seccion == "Ordenar (Seiton)":
            seccion_seiton()
        elif seccion == "Limpiar (Seiso)":
            seccion_seiso()
        elif seccion == "Estandarizar (Seiketsu)":
            seccion_seiketsu()
        elif seccion == "Disciplinar (Shitsuke)":
            seccion_shitsuke()
        elif seccion == "Auditor√≠a 5S":
            seccion_auditoria()
        elif seccion == "M√©tricas y Seguimiento 5s":
            metricas_seguimiento()


def introduccion_coled():
    mostrar_logo() 
    st.title("üöÄ Metodolog√≠a C.O.L.E.D")
    
    st.markdown("""
    ## ¬øPor qu√© C.O.L.E.D?
    
     Los nombres originales de las 5S en japon√©s pueden ser dif√≠ciles de recordar, por eso se adoptaron sus significados 
     en espa√±ol, tomando las primeras letras de cada palabra. As√≠ naci√≥ el acr√≥nimo C.O.L.E.D., una forma m√°s simple de 
     memorizar y aplicar cada paso: Clasificar, Ordenar, Limpiar, Estandarizar y Disciplinar. Esto facilita su uso diario
     y refuerza la mejora continua.
    
    - **C**lasificar: Separar lo necesario de lo innecesario
    - **O**rdenar: Organizar de manera eficiente
    - **L**impiar: Mantener un espacio impecable
    - **E**standardizar: Crear procedimientos consistentes
    - **D**isciplinar: Mantener y mejorar continuamente
    """)
    
    st.video("https://youtu.be/cnRb8jDqfe8?si=ksm0vBqjPlVpTN96")

def seccion_seiri():
    mostrar_logo()
    st.title("üîç Clasificar (Seiri)")
    
    tab1, tab2, tab3 = st.tabs(["Teor√≠a", "Ejercicio Pr√°ctico", "Evaluaci√≥n"])

    with tab1:
        # Contenido exclusivo de la secci√≥n Teor√≠a
        st.markdown("""

        ## Definici√≥n
        Clasificar significa **separar lo necesario de lo innecesario** para eliminar elementos que ocupan espacio 
        o generan desperdicio en el CD.

        ### ¬øQu√© hacer?:
        Identificar qu√© herramientas, materiales o productos son realmente √∫tiles.

        ### ¬øC√≥mo hacerlo?:
        - **Paso 1:** Recorre las √°reas del CD (recepci√≥n, picking, letdown, despacho) y haz un inventario visual.
        - **Paso 2:** Usar **tarjetas rojas** para etiquetar materiales da√±ados, obsoletos o innecesarios. 
        - **Paso 3:** Clasifica los elementos en categor√≠as:
            - **√ötiles:** Lo que se necesita en operaciones diarias.
            - **Reparables:** Herramientas o equipos que pueden reutilizarse despu√©s de arreglarse.
            - **Desechables:** Material que no aporta valor y debe ser eliminado.

        ### ¬øQu√© sigue despu√©s?
        - Mantener solo lo esencial
        - Recicla cart√≥n, pl√°stico y otros materiales reutilizables
        - Evitar acumulaci√≥n de objetos
            
        ### Ejemplo en Log√≠stica ARA
        En un centro de distribuci√≥n, clasificar implica:
        - Identificar productos de alta y baja rotaci√≥n
        - Determinar el estado de equipos y herramientas
        - Eliminar elementos que no aportan valor
        """)

        st.markdown(
            """
            <style>
            .stImage > img {
               width: 25%;  /* Ajusta el tama√±o de la imagen */
               height: auto;
            }
            </style>
            """,
            unsafe_allow_html=True,   

        )
        st.image("images/seiri.jpeg", caption="Clasificar (Seiri)")
    
    with tab2:
        # Contenido exclusivo de la secci√≥n Ejercicio Pr√°ctico
        st.subheader("Ejercicio de Clasificaci√≥n")

        # Introducci√≥n
        st.markdown("""
        **Est√°s en el CEDI, en la parte operacional, y tienes que clasificar los siguientes materiales.**
        **Escoge los que a√∫n se consideran √∫tiles. Son 3 las correctas.**
        """)

        # Elementos a clasificar 
        elementos = [
        "Pallet de madera en buen estado", 
        "Montacargas en uso", 
        "Impresora funcional", 
        "PDT que no enciende", 
        "Diadema de voice picking rota", 
        "Herramienta oxidadas"

        ]

        # Elementos correctos (√∫tiles)
        elementos_necesarios = [
            "Pallet de madera en buen estado", 
            "Montacargas en uso", 
            "Impresora funcional"

        ]
        # Elementos incorrectos (innecesarios)
        elementos_innecesarios = [
            "PDT que no enciende", 
            "Diadema de voice picking rota",
            "Herramienta oxidada"
        ]

        # Pregunta de selecci√≥n m√∫ltiple
        necesarios = st.multiselect(
            "Seleccione los elementos que a√∫n son √∫tiles (son 3 las correctas):",
            elementos
        )

        # Verificaci√≥n de la respuesta
        if st.button("Verificar respuesta"):
            puntuacion = 0
            # Comparar las respuestas del usuario con los elementos correctos
            if set(necesarios) == set(elementos_necesarios):
                puntuacion = 3
                st.success("¬°Correcto! Has seleccionado todos los elementos √∫tiles.")
            else:
                st.error("Algunos de los elementos seleccionados no son correctos. Intenta de nuevo.")

            # Mostrar los elementos correctos
            st.write(f"Elementos correctos: {', '.join(elementos_necesarios)}")
            st.write(f"Elementos incorrectos: {', '.join(elementos_innecesarios)}")
    
    
    with tab3:
        # Contenido exclusivo de la secci√≥n Evaluaci√≥n
        st.subheader("Test de Conocimiento")
        
        preguntas = [
            {
                "pregunta": "¬øCu√°l es el principal objetivo de la actividad de **Clasificar** en la metodolog√≠a 5S?",
                "opciones": [
                    "Mejorar la calidad de los productos",
                    "Separar los elementos √∫tiles de los innecesarios para eliminar el desperdicio",
                    "Incrementar la cantidad de materiales en el almac√©n",
                    "Organizar las herramientas sin eliminar elementos innecesarios"
                ],
                "respuesta_correcta": 1
            },
            {
                "pregunta": "¬øCu√°l de las siguientes opciones es un paso clave en el proceso de clasificaci√≥n??",
                "opciones": [
                    "Hacer un inventario visual y utilizar tarjetas rojas para etiquetar materiales innecesarios",
                    "Organizar todos los materiales en una sola categor√≠a",
                    "Reemplazar todos los productos defectuosos por nuevos",
                    "Descartar todos los materiales sin evaluarlos"
                ],
                "respuesta_correcta": 0
            },
            {
                "pregunta": "¬øQu√© debe hacerse con los materiales clasificados como **desechables**?",
                "opciones": [
                    "Reutilizarlos en otras √°reas del centro de distribuci√≥n",
                    "Guardarlos en un √°rea de almacenamiento separado",
                    "Eliminarlos porque no aportan valor",
                    "Repararlos para su posterior uso"
                ],
                "respuesta_correcta": 2
        }
    ]
        
        
        # Variable para almacenar las respuestas
        respuestas = {}
        
        for i, p in enumerate(preguntas, 1):
            respuestas[i] = st.radio(
                f"Pregunta {i}: {p['pregunta']}", 
                p['opciones'],
                key=f"pregunta_{i}"  # Clave √∫nica para evitar conflictos
            )
        
        # Bot√≥n de env√≠o
        if st.button("Enviar Respuestas", key="enviar_respuestas"):
            # Calcular puntuaci√≥n
            puntuacion = 0
            for i, p in enumerate(preguntas, 1):
                if respuestas[i] == p['opciones'][p['respuesta_correcta']]:
                    puntuacion += 1
            
            # Mostrar resultados
            total = len(preguntas)
            st.write(f"Puntuaci√≥n: {puntuacion}/{total}")
            
            # Retroalimentaci√≥n
            if puntuacion == total:
                st.success("¬°Excelente! Has respondido correctamente todas las preguntas")
            elif puntuacion >= total * 0.7:
                st.warning("Buen trabajo. Revisa las respuestas que no fueron correctas")
            else:
                st.error("Necesitas repasar el material. Intenta nuevamente")

def seccion_seiton():
    mostrar_logo()
    st.title("üóÇÔ∏è Ordenar (Seiton)")
    
    tab1, tab2, tab3 = st.tabs(["Teor√≠a", "Ejercicio Pr√°ctico", "Evaluaci√≥n"])
    
    # Secci√≥n de Teor√≠a
    with tab1:
        st.markdown("""
        ## Definici√≥n
        Ordenar significa **establecer un lugar para cada cosa y cada cosa en su lugar**.

        ### ¬øQu√© hacer?:
        Organizar las herramientas, productos y materiales seg√∫n su frecuencia de uso y caracter√≠sticas.

        ### ¬øC√≥mo hacerlo?:
        - **Paso 1:** Asigna zonas para cada tipo de material (alta rotaci√≥n, baja rotaci√≥n, herramientas, equipos).
        - **Paso 2:** Usar etiquetas, c√≥digos de colores o se√±alizaci√≥n para identificar f√°cilmente las zonas.
        - **Paso 3:** Agrupar los objetos similares para que sea m√°s f√°cil localizarlos.

         ### ¬øQu√© sigue despu√©s?:
         - Mantener la organizaci√≥n
         - Respetar los espacios definidos
         - Devolver cada cosa a su lugar 

         ### Tips
         - "Un lugar para cada cosa"
         - Usar colores para identificar 
         - Mantener cerca lo mas usado
         - Simplicidad en la organizaci√≥n

        """)

        st.markdown(
            """
            <style>
            .stImage > img {
               width: 25%;  /* Ajusta el tama√±o de la imagen */
               height: auto;
            }
            </style>
            """,
            unsafe_allow_html=True,   

        )
        st.image("images/seiton.png", caption="Ordenar (Seiton))")
        
    
    # Secci√≥n de Ejercicio Pr√°ctico
    with tab2:
        st.subheader("Ejercicio de Organizaci√≥n de Almac√©n")
        
        productos = {
            "Producto A": "Alta rotaci√≥n",
            "Producto B": "Baja rotaci√≥n",
            "Producto C": "Media rotaci√≥n",
            "Producto D": "Alta rotaci√≥n",
            "Producto E": "Baja rotaci√≥n"
        }
        
        # Crear zonas para organizar productos
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.write("#### Zona Cercana")
            zona_cercana = st.multiselect(
                "Productos de alta rotaci√≥n:",
                list(productos.keys())
            )
            
        with col2:
            st.write("#### Zona Intermedia")
            zona_intermedia = st.multiselect(
                "Productos de media rotaci√≥n:",
                list(productos.keys())
            )
            
        with col3:
            st.write("#### Zona Alejada")
            zona_alejada = st.multiselect(
                "Productos de baja rotaci√≥n:",
                list(productos.keys())
            )
        
        # Bot√≥n para verificar la organizaci√≥n
        if st.button("Verificar Organizaci√≥n", key="verificar_organizacion"):
            puntuacion = 0
            total = len(productos)
            
            # Evaluar las zonas
            for producto in zona_cercana:
                if productos[producto] == "Alta rotaci√≥n":
                    puntuacion += 1
                    
            for producto in zona_intermedia:
                if productos[producto] == "Media rotaci√≥n":
                    puntuacion += 1
                    
            for producto in zona_alejada:
                if productos[producto] == "Baja rotaci√≥n":
                    puntuacion += 1
            
            st.progress(puntuacion / total)
            st.write(f"Puntuaci√≥n: {puntuacion}/{total}")
            
            if puntuacion == total:
                st.success("¬°Excelente! Has organizado correctamente todos los productos")
            else:
                st.warning("Revisa la ubicaci√≥n de algunos productos seg√∫n su rotaci√≥n")
    
    # Secci√≥n de Evaluaci√≥n
    with tab3:
        st.subheader("Test de Conocimiento")
        
        preguntas = [
            {
                "pregunta": "¬øCu√°l es el objetivo principal de la actividad Ordenar en la metodolog√≠a 5S??",
                "opciones": [
                    "Limpiar el espacio de trabajo",
                    "Establecer un lugar para cada cosa y cada cosa en su lugar",
                    "Organizar los documentos de trabajo",
                    "Clasificar los productos seg√∫n su tama√±o"
                ],
                "respuesta_correcta": 1
            },
            {
                "pregunta": "¬øCu√°l de las siguientes opciones es un paso clave en el proceso de Ordenar?",
                "opciones": [
                    "Asignar zonas para cada tipo de material seg√∫n su frecuencia de uso",
                    "Eliminar productos innecesarios",
                    "Mantener los materiales en √°reas alejadas de las zonas de trabajo",
                    "No utilizar se√±alizaci√≥n en las zonas de almacenamiento"
                ],
                "respuesta_correcta": 0
            },
            {
                "pregunta": "¬øQu√© herramienta puedes usar para identificar f√°cilmente las zonas en el espacio de trabajo?",
                "opciones": [
                    "Listas de verificaci√≥n",
                    "Etiquetas, c√≥digos de colores o se√±alizaci√≥n",
                    "Herramientas de medici√≥n",
                    "Ninguna de las anteriores"
                ],
                "respuesta_correcta": 1
            }
        ]

            
        # Variable para almacenar las respuestas
        respuestas = {}

        # Crear preguntas interactivas
        for i, p in enumerate(preguntas, 1):
            respuestas[i] = st.radio(
                f"Pregunta {i}: {p['pregunta']}", 
                p['opciones'],
                key=f"pregunta_{i}"  # Clave √∫nica para evitar conflictos
            )

        # Bot√≥n de env√≠o
        if st.button("Enviar Respuestas", key="enviar_respuestas"):
            # Calcular puntuaci√≥n
            puntuacion = 0
            for i, p in enumerate(preguntas, 1):
                if respuestas[i] == p['opciones'][p['respuesta_correcta']]:
                    puntuacion += 1

            # mostrar resultado
            total = len(preguntas)
            st.write(f"Puntuaci√≥n: {puntuacion}/{total}")

            # Retroalimentaci√≥n
            if puntuacion == total:
                st.success("¬°Excelente! Has respondido correctamente todas las preguntas")
            elif puntuacion >= total * 0.7:
                st.warning("Buen trabajo. Revisa las respuestas que no fueron correctas")
            else:
                st.error("Necesitas repasar el material. Intenta nuevamente")
        
        

def seccion_seiso():
    mostrar_logo()
    st.title("üßπ Limpiar (Seiso)")
    
    tab1, tab2, tab3 = st.tabs(["Teor√≠a", "Ejercicio Pr√°ctico", "Evaluaci√≥n"])
    
    # Secci√≥n de Teor√≠a
    with tab1:
        st.markdown("""
        
        ### Definici√≥n
        Limpiar significa **eliminar el polvo y la suciedad de todos los elementos** en el lugar de trabajo.

        ### ¬øQu√© hacer?:
        Realizar limpieza peri√≥dica en todas las √°reas y equipos del CD.

        ### ¬øC√≥mo hacerlo?:
        - **Paso 1:** Define un cronograma de limpieza para cada √°rea (diario, semanal, mensual).
        - **Paso 2:** Proporciona herramientas adecuadas para limpiar
        - **Paso 3:** Crear checklist de limpieza

        ### ¬ø¬øQu√© sigue despu√©s?:
         - Fomenta la limpieza diaria como parte de la rutina
         - Hacer de la limpieza un h√°bito
         - Involucrar a todo el equipo 

        ### Tips
         - Limpiar mientras trabajas
         - Tener kit de limpieza cerca
         - Hacer de la limpieza un ritual diario
        
        ### Importancia en ARA
        - Mantiene los equipos en √≥ptimas condiciones
        - Aumenta la vida √∫til de herramientas y maquinaria
        - Mejora la visibilidad y reduce errores
        - Crea un ambiente de trabajo m√°s seguro y agradable
        
        ### √Åreas Clave para Limpieza
        1. Zonas de almacenamiento
        2. Equipos de manipulaci√≥n
        3. √Åreas de tr√°nsito
        4. Servicios y oficinas
        """)

        st.markdown(
            """
            <style>
            .stImage > img {
               width: 25%;  /* Ajusta el tama√±o de la imagen */
               height: auto;
            }
            </style>
            """,
            unsafe_allow_html=True,)
        st.image("images/limpieza.jpeg", caption="Limpieza en Log√≠stica")
    
    # Secci√≥n de Ejercicio Pr√°ctico
    
    with tab2:
        # Contenido exclusivo de la secci√≥n Ejercicio Pr√°ctico
        st.subheader("Ejercicio de Limpiar (Seiso)")

        # Introducci√≥n al ejercicio
        st.markdown("""
        **Est√°s en el √°rea de transporte de un centro de distribuci√≥n (CEDI) y necesitas realizar la limpieza completa de varias zonas clave.**
        Clasifica las siguientes tareas en las categor√≠as correctas:
    
        - **Tareas diarias**: Limpieza que debe realizarse todos los d√≠as.
        - **Tareas semanales**: Limpieza que se debe realizar semanalmente.
        - **Tareas mensuales**: Limpieza que se realiza una vez al mes.
        """)

        # √Åreas y tareas a clasificar
        tareas = [
            "Limpieza del equipo de manipulaci√≥n (montacargas y carretillas)",
            "Limpieza de las √°reas de tr√°nsito (pasillos y accesos)", 
            "Limpieza de las zonas de almacenamiento (estantes, estanter√≠as)", 
            "Limpieza de los servicios y oficinas (escritorios, sillas, papeleras)", 
            "Revisi√≥n de filtros de aire y equipos de ventilaci√≥n"
    ]

        # Clasificaci√≥n de tareas por frecuencia
        seleccion = st.multiselect(
            "Clasifica las siguientes tareas seg√∫n su frecuencia (diarias, semanales, mensuales):",
            tareas,
            default=[]  # Aqu√≠ puedes preseleccionar algunas si lo deseas
    )

           
        # Respuesta esperada
        correcta = {
            "Limpieza del equipo de manipulaci√≥n (montacargas y carretillas)": "Diarias",
            "Limpieza de las √°reas de tr√°nsito (pasillos y accesos)": "Diarias",
            "Limpieza de las zonas de almacenamiento (estantes, estanter√≠as)": "Semanales",
            "Limpieza de los servicios y oficinas (escritorios, sillas, papeleras)": "Semanales",
            "Revisi√≥n de filtros de aire y equipos de ventilaci√≥n": "Mensuales"
    }

        # Verificaci√≥n de respuesta
        if st.button("Verificar clasificaci√≥n"):
            puntuacion = 0
            # Verificar si la clasificaci√≥n es correcta
            for item in seleccion:
                if correcta.get(item) == "Diarias" and item == "Limpieza del equipo de manipulaci√≥n (montacargas y carretillas)":
                    puntuacion += 1
                elif correcta.get(item) == "Semanales" and (item == "Limpieza de las zonas de almacenamiento (estantes, estanter√≠as)" or item == "Limpieza de los servicios y oficinas (escritorios, sillas, papeleras)"):
                    puntuacion += 1
                elif correcta.get(item) == "Mensuales" and item == "Revisi√≥n de filtros de aire y equipos de ventilaci√≥n":
                    puntuacion += 1

            # Retroalimentaci√≥n
            if puntuacion == 5:
                st.success("¬°Correcto! Has clasificado todas las tareas correctamente.")
            else:
                st.warning(f"Clasificaste {puntuacion} de 5 tareas correctamente. Revisa tus respuestas.")
                
                st.write("Respuestas Correctas:")
                st.write(f"1. Limpieza del equipo de manipulaci√≥n: Diarias")
                st.write(f"2. Limpieza de las √°reas de tr√°nsito: Diarias")
                st.write(f"3. Limpieza de las zonas de almacenamiento: Semanales")
                st.write(f"4. Limpieza de los servicios y oficinas: Semanales")
                st.write(f"5. Revisi√≥n de filtros de aire: Mensuales")

    # Secci√≥n de Evaluaci√≥n
    with tab3:
        st.subheader("Test de Conocimiento")
        
        preguntas = [
            {
                "pregunta": "¬øCu√°l es el objetivo principal de Seiso?",
                "opciones": [
                    "Ordenar el √°rea de trabajo",
                    "Eliminar lo innecesario",
                    "Mantener limpio y eliminar fuentes de suciedad",
                    "Crear procedimientos"
                ],
                "respuesta_correcta": 2
            },
            {
                "pregunta": "¬øPor qu√© es importante la limpieza en log√≠stica?",
                "opciones": [
                    "Solo por apariencia",
                    "Para mantener equipos funcionando y prevenir accidentes",
                    "Para cumplir con las normas",
                    "Para usar m√°s productos de limpieza"
                ],
                "respuesta_correcta": 1
            }
        ]
        
        # Almacenar las respuestas
        respuestas = {}
        for i, p in enumerate(preguntas, 1):
            respuestas[i] = st.radio(
                f"Pregunta {i}: {p['pregunta']}",
                p['opciones'],
                key=f"seiso_pregunta_{i}"  # Clave √∫nica para evitar conflictos
            )
        
        # Bot√≥n para enviar respuestas
        if st.button("Enviar Respuestas", key="enviar_respuestas_seiso"):
            puntuacion = 0
            for i, p in enumerate(preguntas, 1):
                if respuestas[i] == p['opciones'][p['respuesta_correcta']]:
                    puntuacion += 1
            
            # Mostrar resultados
            total = len(preguntas)
            st.write(f"Puntuaci√≥n: {puntuacion}/{total}")
            
            # Retroalimentaci√≥n
            if puntuacion == total:
                st.success("¬°Excelente! Has respondido correctamente todas las preguntas.")
            elif puntuacion >= total * 0.7:
                st.warning("Buen trabajo. Revisa las respuestas que no fueron correctas.")
            else:
                st.error("Necesitas repasar el material. Intenta nuevamente.")

def seccion_seiketsu():
    mostrar_logo()
    st.title("üìã Estandarizar (Seiketsu)")
    
    tab1, tab2, tab3 = st.tabs(["Teor√≠a", "Ejercicio Pr√°ctico", "Evaluaci√≥n"])
    
    with tab1:
        st.markdown("""
        
        ### Definici√≥n
        Estandarizar significa **crear procedimientos y rutinas** que mantengan las primeras 3S.

        ### ¬øQu√© hacer?:
        Documentar y compartir los procesos de clasificaci√≥n, orden y limpieza.

        ### ¬øC√≥mo hacerlo?:
        - **Paso 1:** Crear manuales o checklists simples para cada √°rea.
        - **Paso 2:** Capacitar al personal sobre estas normas.
        - **Paso 3:** Usar tableros de control para monitorear el cumplimiento.

        ### ¬øQu√© sigue despu√©s?:
         - Actualizar los est√°ndares regularmente seg√∫n las necesidades del CD.
         - Realiza auditor√≠as para garantizar el cumplimiento.
         
        ### Tips
         - Simplicidad en los procedimientos
         - Hacerlos visuales 
         - Actualizarlos constantemente 

        ### Importancia en Log√≠stica ARA
        - Mantiene los logros alcanzados
        - Crea rutinas claras y efectivas
        - Facilita el entrenamiento de nuevo personal
        
        ### Elementos de Estandarizaci√≥n
        1. Procedimientos documentados
        2. Checklist de verificaci√≥n
        3. Se√±alizaci√≥n visual
        4. Roles y responsabilidades claros
        
        ### Beneficios
        - Mayor consistencia en operaciones
        - Reducci√≥n de errores
        - Facilita la detecci√≥n de anomal√≠as
        - Mejora continua sostenible
        """)
        
        st.image("images/estandarizacion.jpeg", caption="Estandarizaci√≥n en Log√≠stica", use_container_width=True)
    
    with tab2:
        st.subheader("Ejercicio de Creaci√≥n de Procedimientos")
        
        # Ejercicio para crear un procedimiento est√°ndar
        st.write("### Cree un procedimiento est√°ndar para recepci√≥n de mercanc√≠a")
        
        # Pasos disponibles para ordenar
        pasos_disponibles = [
            "Verificar documentaci√≥n",
            "Descargar mercanc√≠a",
            "Inspeccionar calidad",
            "Registrar en sistema",
            "Asignar ubicaci√≥n",
            "Contactar al proveedor",
            "Almacenar productos",
            "Confirmar cantidades"
        ]
        
        # Usuario ordena los pasos
        orden_pasos = st.multiselect(
            "Ordene los pasos del procedimiento (en el orden correcto):",
            pasos_disponibles
        )
        
        if st.button("Verificar Procedimiento"):
            # Orden correcto de los pasos
            orden_correcto = [
                "Verificar documentaci√≥n",
                "Descargar mercanc√≠a",
                "Confirmar cantidades",
                "Inspeccionar calidad",
                "Registrar en sistema",
                "Asignar ubicaci√≥n",
                "Almacenar productos"
            ]
            
            # Calcular puntuaci√≥n
            puntos = 0
            for i, paso in enumerate(orden_pasos):
                if i < len(orden_correcto) and paso == orden_correcto[i]:
                    puntos += 1
            
            # Mostrar resultado
            total = len(orden_correcto)
            st.progress(puntos/total)
            st.write(f"Puntuaci√≥n: {puntos}/{total}")
            
            if puntos == total:
                st.success("¬°Perfecto! Has creado el procedimiento correcto")
            elif puntos >= total * 0.7:
                st.warning("¬°Buen intento! Revisa el orden de algunos pasos")
            else:
                st.error("Revisa el orden de los pasos y vuelve a intentarlo")
    
    with tab3:
        st.subheader("Test de Conocimiento")
        
        preguntas = [
            {
                "pregunta": "¬øCu√°l es el principal objetivo de Seiketsu?",
                "opciones": [
                    "Limpiar el √°rea de trabajo",
                    "Mantener los logros de las primeras 3S",
                    "Ordenar materiales",
                    "Clasificar elementos"
                ],
                "respuesta_correcta": 1
            },
            {
                "pregunta": "¬øQu√© herramienta es esencial para la estandarizaci√≥n?",
                "opciones": [
                    "Productos de limpieza",
                    "Etiquetas de color",
                    "Procedimientos documentados",
                    "Carretillas elevadoras"
                ],
                "respuesta_correcta": 2
            }
        ]
        
        # Variable para almacenar las respuestas
        respuestas = {}
        
        for i, p in enumerate(preguntas, 1):
            respuestas[i] = st.radio(
                f"Pregunta {i}: {p['pregunta']}", 
                p['opciones']
            )
        
        # Bot√≥n de env√≠o
        if st.button("Enviar Respuestas"):
            # Calcular puntuaci√≥n
            puntuacion = 0
            for i, p in enumerate(preguntas, 1):
                if respuestas[i] == p['opciones'][p['respuesta_correcta']]:
                    puntuacion += 1
            
            # Mostrar resultados
            total = len(preguntas)
            st.write(f"Puntuaci√≥n: {puntuacion}/{total}")
            
            # Retroalimentaci√≥n
            if puntuacion == total:
                st.success("¬°Excelente! Has respondido correctamente todas las preguntas")
            elif puntuacion >= total * 0.7:
                st.warning("Buen trabajo. Revisa las respuestas que no fueron correctas")
            else:
                st.error("Necesitas repasar el material. Intenta nuevamente")

def seccion_shitsuke():
    mostrar_logo()
    st.title("üéØ Disciplinar (Shitsuke)")
    
    tab1, tab2, tab3 = st.tabs(["Teor√≠a", "Ejercicio Pr√°ctico", "Evaluaci√≥n"])
    
    with tab1:
        st.markdown("""
    
        ### Definici√≥n
        Disciplinar significa **convertir las 5S en un h√°bito** y mantener una cultura de mejora continua.

         ### ¬øQu√© hacer?:
        Crear una cultura de mejora, capacitar y motivar al equipo para mantener la metodologia. 

        ### ¬øC√≥mo hacerlo?:
        - **Paso 1:** Realizar capacitaciones. 
        - **Paso 2:** Establecer auditorias periodicas con indicadores claros.
        - **Paso 3:** Recompensar y reconocer buenos comportamientos.

         ### ¬øQu√© sigue despu√©s?:
         - Fomentar la participaci√≥n de todo el equipo 
         - Ajustar las metas seg√∫n las necesidades del CD. 
         - Compromiso de todos 

        ### Importancia en Log√≠stica ARA
        - Asegura la sostenibilidad del programa 5S
        - Fomenta la participaci√≥n del personal
        - Promueve el desarrollo profesional
        - Mejora el ambiente laboral
        
        ### Elementos Clave
        1. Capacitaci√≥n continua
        2. Auditor√≠as regulares
        3. Reconocimiento de logros
        4. Comunicaci√≥n efectiva
        
        ### Beneficios
        - Mayor compromiso del personal
        - Mejora continua sostenible
        - Ambiente de trabajo positivo
        - Cultura organizacional fortalecida
        """)
        
        # Cambio en la forma de mostrar la imagen
        st.image("images/disciplina.jpeg", caption="Disciplina en Log√≠stica", use_container_width=True)

        # Verificaci√≥n de la existencia del archivo
        file_path = r"C:\Users\LURUENA\OneDrive - Grupo Jer√≥nimo Martins\Documents\mi_manual_5s\assets\Lista de Chequeo 5S.pdf"

        if os.path.exists(file_path):
            with open(file_path, "rb") as f:
                st.download_button(
                    label="Descargar Lista de Chequeo (PDF)",
                    data=f,
                    file_name="Lista de Chequeo 5S.pdf",
                    mime="application/pdf"
                )
        else:
            st.write(f"El archivo no fue encontrado en la ruta: {file_path}")

    with tab2:
        st.subheader("Ejercicio de Seguimiento de H√°bitos 5S")
        
        # Nuevo ejercicio pr√°ctico
        st.write("### Registro Semanal de H√°bitos 5S")
        
        habitos = {
            "Lunes": ["Revisi√≥n inicial del √°rea", "Verificaci√≥n de orden", "Limpieza b√°sica"],
            "Mi√©rcoles": ["Auditor√≠a r√°pida", "Actualizaci√≥n de indicadores", "Reuni√≥n de mejora"],
            "Viernes": ["Verificaci√≥n final", "Registro de incidencias", "Plan siguiente semana"]
        }
        
        # Selecci√≥n del d√≠a
        dia_seleccionado = st.selectbox("Seleccione el d√≠a:", list(habitos.keys()))
        
        # Mostrar tareas del d√≠a
        st.write(f"### Tareas para {dia_seleccionado}:")
        tareas_completadas = {}
        
        for tarea in habitos[dia_seleccionado]:
            tareas_completadas[tarea] = st.checkbox(tarea)
            
            if tareas_completadas[tarea]:
                hora = st.time_input(f"Hora de realizaci√≥n de: {tarea}")
                comentario = st.text_input(f"Comentario para: {tarea}")
        
        if st.button("Registrar Seguimiento"):
            tareas_hechas = sum(tareas_completadas.values())
            total_tareas = len(habitos[dia_seleccionado])
            
            st.progress(tareas_hechas/total_tareas)
            st.write(f"Progreso del d√≠a: {tareas_hechas}/{total_tareas} tareas completadas")
            
            if tareas_hechas == total_tareas:
                st.success("¬°Excelente! Has completado todas las tareas del d√≠a")
            else:
                st.warning(f"A√∫n quedan {total_tareas - tareas_hechas} tareas por completar")
    
    with tab3:
        st.subheader("Test de Conocimiento")
        
        preguntas = [
            {
                "pregunta": "¬øQu√© significa Shitsuke?",
                "opciones": [
                    "Limpiar el √°rea",
                    "Mantener el orden",
                    "Crear h√°bitos y disciplina",
                    "Estandarizar procesos"
                ],
                "respuesta_correcta": 2
            },
            {
                "pregunta": "¬øCu√°l es la mejor manera de mantener la disciplina 5S?",
                "opciones": [
                    "Aplicar sanciones",
                    "Realizar auditor√≠as regulares y capacitaci√≥n",
                    "Aumentar la supervisi√≥n",
                    "Incrementar la documentaci√≥n"
                ],
                "respuesta_correcta": 1
            }
        ]
        
        # Variable para almacenar las respuestas
        respuestas = {}
        
        for i, p in enumerate(preguntas, 1):
            respuestas[i] = st.radio(
                f"Pregunta {i}: {p['pregunta']}", 
                p['opciones']
            )
        
        # Bot√≥n de env√≠o
        if st.button("Enviar Respuestas"):
            # Calcular puntuaci√≥n
            puntuacion = 0
            for i, p in enumerate(preguntas, 1):
                if respuestas[i] == p['opciones'][p['respuesta_correcta']]:
                    puntuacion += 1
            
            # Mostrar resultados
            total = len(preguntas)
            st.write(f"Puntuaci√≥n: {puntuacion}/{total}")
            
            # Retroalimentaci√≥n
            if puntuacion == total:
                st.success("¬°Excelente! Has respondido correctamente todas las preguntas")
            elif puntuacion >= total * 0.7:
                st.warning("Buen trabajo. Revisa las respuestas que no fueron correctas")
            else:
                st.error("Necesitas repasar el material. Intenta nuevamente")

def seccion_auditoria():
    mostrar_logo()
    st.title("üìä Auditor√≠a 5S")
    
    st.write("### Realice una auditor√≠a 5S")
    
    # Categor√≠as para evaluar
    categorias = {
        "Clasificaci√≥n": ["Elementos innecesarios eliminados", "√Årea libre de obst√°culos", "Inventario optimizado"],
        "Orden": ["Se√±alizaci√≥n clara", "Ubicaciones definidas", "F√°cil acceso a materiales"],
        "Limpieza": ["√Årea limpia", "Equipos mantenidos", "Cronograma de limpieza visible"],
        "Estandarizaci√≥n": ["Procedimientos visibles", "Checklist actualizados", "Roles definidos"],
        "Disciplina": ["Personal capacitado", "Auditor√≠as regulares", "Mejoras implementadas"]
    }
    
    # Crear formulario de auditor√≠a
    puntuacion_total = 0
    max_puntos = 0
    
    for categoria, items in categorias.items():
        st.write(f"#### {categoria}")
        for item in items:
            puntuacion = st.slider(
                f"{item}",
                0, 5, 3,
                help="0 = No cumple, 5 = Cumple totalmente"
            )
            puntuacion_total += puntuacion
            max_puntos += 5
    
    if st.button("Calcular Resultado"):
        porcentaje = (puntuacion_total / max_puntos) * 100
        st.write(f"Puntuaci√≥n total: {puntuacion_total}/{max_puntos}")
        st.progress(puntuacion_total/max_puntos)
        
        if porcentaje >= 90:
            st.success("¬°Excelente implementaci√≥n 5S!")
        elif porcentaje >= 70:
            st.warning("Buena implementaci√≥n, con oportunidades de mejora")
        else:
            st.error("Se requiere mayor atenci√≥n a la implementaci√≥n 5S")
        
        # Recomendaciones basadas en la puntuaci√≥n
        st.write("### Recomendaciones:")
        for categoria, items in categorias.items():
            st.write(f"**{categoria}:**")
            for item in items:
                st.write(f"- Mantener el seguimiento de: {item}")

def metricas_seguimiento():
    mostrar_logo()
    st.title("üìä M√©tricas y Seguimiento 5S")

    # Funci√≥n para cargar datos de evaluaci√≥n
    def cargar_datos_evaluacion():
        fechas = pd.date_range(start='2024-01-01', end='2024-12-31', freq='W')
        datos_5s = {
            'Clasificar': np.random.uniform(70, 90, len(fechas)),
            'Ordenar': np.random.uniform(65, 85, len(fechas)),
            'Limpiar': np.random.uniform(60, 80, len(fechas)),
            'Estandarizar': np.random.uniform(55, 75, len(fechas)),
            'Disciplinar': np.random.uniform(50, 70, len(fechas)),
        }
        df_promedios = pd.DataFrame(datos_5s, index=fechas)
        return df_promedios

    # Cargar datos y manejar valores faltantes
    df_promedios = cargar_datos_evaluacion()
    df_promedios = df_promedios.fillna(0)  # Reemplazar NaN con 0 para evitar errores

    # Agregar un selector de rango de fechas
    st.subheader("Seleccione el Rango de Fechas para el An√°lisis")
    fecha_inicio = st.date_input("Fecha de Inicio", value=pd.to_datetime("2024-01-01"))
    fecha_fin = st.date_input("Fecha de Fin", value=pd.to_datetime("2024-12-31"))

    # Filtrar datos por rango de fechas
    if fecha_inicio > fecha_fin:
        st.error("La fecha de inicio no puede ser posterior a la fecha de fin.")
        return

    df_filtrado = df_promedios.loc[fecha_inicio:fecha_fin]

    if df_filtrado.empty:
        st.warning("No hay datos disponibles para el rango de fechas seleccionado.")
        return

    # Mostrar gr√°fico de evoluci√≥n temporal
    st.subheader("Evoluci√≥n Temporal")
    fig = px.line(
        df_filtrado, 
        title=f"Evoluci√≥n de Implementaci√≥n 5S ({fecha_inicio} a {fecha_fin})",
        labels={'value': 'Porcentaje de Cumplimiento', 'variable': 'Categor√≠a'},
        template='plotly_white'
    )
    fig.update_layout(hovermode='x unified', yaxis_range=[0, 100])
    st.plotly_chart(fig, use_container_width=True)
    
    # **Nuevo: Gr√°fico de barras por √∫ltima medici√≥n**
    st.subheader("Gr√°fico de Barras: √öltima Medici√≥n por Categor√≠a")
    ultima_medicion = df_filtrado.iloc[-1]

    # Crear gr√°fico de barras para mostrar los valores de la √∫ltima medici√≥n por categor√≠a
    fig_barras = px.bar(
        ultima_medicion, 
        title=f"√öltima Medici√≥n por Categor√≠a ({fecha_inicio} a {fecha_fin})",
        labels={'value': 'Porcentaje de Cumplimiento', 'index': 'Categor√≠a'},
        template='plotly_white'
    )
    fig_barras.update_layout(yaxis_range=[0, 100])
    st.plotly_chart(fig_barras, use_container_width=True)

    # Mostrar tabla de datos filtrados
    st.subheader("Datos Filtrados")
    st.dataframe(df_filtrado)

    # Agregar una secci√≥n de an√°lisis detallado
    st.subheader("An√°lisis Detallado por Categor√≠a")
    categoria_seleccionada = st.selectbox(
        "Seleccione una categor√≠a para analizar:",
        df_filtrado.columns
    )

    if categoria_seleccionada:
        fig_categoria = px.line(
            df_filtrado[categoria_seleccionada],
            title=f"Evoluci√≥n de {categoria_seleccionada} ({fecha_inicio} a {fecha_fin})",
            labels={'value': 'Porcentaje de Cumplimiento', 'index': 'Fecha'},
            template='plotly_white'
        )
        fig_categoria.update_layout(hovermode='x unified', yaxis_range=[0, 100])
        st.plotly_chart(fig_categoria, use_container_width=True)


def main():
    st.sidebar.title("Manual 5S ARA")
    
    # Men√∫ de navegaci√≥n
    seccion = st.sidebar.radio(
        "Seleccione una secci√≥n:",
        ["Inicio","Contexto de las 5S"," Metodolog√≠a C.O.L.E.D", "Clasificar (Seiri)", "Ordenar (Seiton)", "Limpiar (Seiso)", 
         "Estandarizar (Seiketsu)", "Disciplinar (Shitsuke)", "Auditor√≠a 5S", "M√©tricas y Seguimiento 5s"]
    )
    
    # Aplicar estilos y l√≥gica por secci√≥n
    if seccion == "Inicio":
        aplicar_estilos_portada()  # Estilos espec√≠ficos para la portada
        pagina_inicio()
    else:
        aplicar_estilos_generales()  # Estilos generales para las dem√°s secciones
        
        # Mostrar la secci√≥n correspondiente
        if seccion == "Contexto de las 5S":
            contexto_5s()
        elif seccion == " Metodolog√≠a C.O.L.E.D":  # Llama a la funci√≥n de COLED
            introduccion_coled()
        elif seccion == "Clasificar (Seiri)":
            seccion_seiri()
        elif seccion == "Ordenar (Seiton)":
            seccion_seiton()
        elif seccion == "Limpiar (Seiso)":
            seccion_seiso()
        elif seccion == "Estandarizar (Seiketsu)":
            seccion_seiketsu()
        elif seccion == "Disciplinar (Shitsuke)":
            seccion_shitsuke()
        elif seccion == "Auditor√≠a 5S":
            seccion_auditoria()
        elif seccion == "M√©tricas y Seguimiento 5s":
            metricas_seguimiento()   



if __name__ == "__main__":
    main()
    